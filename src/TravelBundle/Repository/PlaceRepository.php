<?php

namespace TravelBundle\Repository;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Mapping\ClassMetadata;
use TravelBundle\Entity\Place;
use TravelBundle\Entity\Search;

/**
 * PlaceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlaceRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * MessageRepository constructor.
     * @param EntityManagerInterface $em
     */
    public function __construct(EntityManagerInterface $em)
    {
        parent::__construct($em, new ClassMetadata(Place::class));
    }

    public function findAllBySearch(Search $search){
        return $this->createQueryBuilder('place')
            ->innerJoin('place.address', 'address')
            ->where('address.country = :country')
            ->andWhere('address.city = :city')
            ->andWhere('place.capacity >= :capacity')
            ->leftJoin('place.bookings', 'bookings')
            ->andWhere('bookings IS NULL OR ((bookings.startDate >= :endDate AND bookings.startDate >= :startDate) OR
                        (bookings.startDate <= :endDate AND bookings.startDate <= :startDate))')
            ->andWhere('place.owner != :user')
            ->setParameters([
                ':country' => $search->getCountry(),
                ':city' => $search->getCity(),
                ':capacity' => $search->getCapacity(),
                ':endDate' => $search->getEndDate(),
                ':startDate' => $search->getStartDate(),
                ':user' => $search->getUser()
            ])
            ->getQuery()
            ->getResult();
    }

    public function save(Place $place){

        try{
            $this->_em->persist($place);
            $this->_em->flush();

            return true;
        }catch (\Exception $e){

            return false;
        }

    }

    public function update(Place $place){
        try{
            $this->_em->merge($place);
            $this->_em->flush();

            return true;
        }catch (\Exception $e){

            return false;
        }
    }

    public function delete(Place $place){
        try{
            $this->_em->remove($place);
            $this->_em->flush();

            return true;
        }catch (\Exception $e){

            return false;
        }
    }

}
